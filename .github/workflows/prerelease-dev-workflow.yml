name: Create new release

on:
  push:
    tags: 'v*'

jobs:
  build-and-test:
    runs-on: windows-latest
    
    env:
      SigningCertificate: StudySmarterFlashcards_TempKey.pfx
      Solution_Path: StudySmarterFlashcards.sln
      UWP_Project_Path: StudySmarterFlashcards.csproj
      UWP_Project_Directory: StudySmarterFlashcards
      UWP_Test_Project_Path: StudySmarterFlashcardsTests.csproj
      UWP_Test_Project_Directory: StudySmarterFlashcardsTests

    steps:
    - name: Get tag
      id: tag
      uses: dawidd6/action-get-tag@v1
      
    - name: Extract version from tag
      id: getVersion
      run: |
        $rawVersionTag = "${{steps.tag.outputs.tag}}"
        echo "##[set-output name=version;]$(($rawVersionTag).Split('v')[1])"
      shell: pwsh
        
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.0
      
    - name: Setup VSTest Path
      uses: darenm/Setup-VSTest@v1
      
    - name: Update manifest version
      run: |
        [xml]$manifest = Get-Content ".\$env:UWP_Project_Directory\Package.appxmanifest"
        $manifest.Package.Identity.Version = "${{steps.getVersion.outputs.version}}"
        $manifest.save(".\$env:UWP_Project_Directory\Package.appxmanifest")
        [xml]$testManifest = Get-Content ".\$env:UWP_Test_Project_Directory\Package.appxmanifest"
        $testManifest.Package.Identity.Version = "${{steps.getVersion.outputs.version}}"
        $testManifest.save(".\$env:UWP_Test_Project_Directory\Package.appxmanifest")

    # - name: Decode the PFX Base 64 String
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.SSF_TOKEN }}")
    #     $currentDirectory = Get-Location
    #     $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:UWP_Project_Directory -AdditionalChildPath $env:SigningCertificate
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte) 

    - name: Build the solution
      run: msbuild $env:Solution_Path /p:Platform=x86 /p:AppxBundle=Always /p:BuildMode=StoreUpload /p:Configuration=Release /p:AppxPackageSigningEnabled=false /restore ##/p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword="${{ secrets.SSF_TOKEN_PASSWORD }}" /restore
      env:
        AppxBunde: Always
        BuildMode: StoreUpload
        Configuration: Release

    # - name: Remove the .pfx
    #   run: Remove-Item -Path $env:UWP_Project_Directory/$env:SigningCertificate

    - name: Get All Folders To Find Build Objects 
      id: getFolders	     
      run: |	   
        Get-ChildItem -Path .\$env:UWP_Project_Directory\AppPackages -Recurse -Force -ErrorAction SilentlyContinue | Select-Object Name	  
      shell: pwsh

    - name: VSTest
      run: vstest.console.exe /Platform:x64 .\$env:UWP_Test_Project_Directory\AppPackages\StudySmarterFlashcardsTests_${{steps.getVersion.outputs.version}}_Test\StudySmarterFlashcardsTests_${{steps.getVersion.outputs.version}}_x86.appxsym
      
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: RC ${{steps.getVersion.outputs.version}}
        draft: false
        prerelease: true

    - name: Prepare artifact metadata
      id: prepare_artifact_metadata
      run: |
        echo "##[set-output name=artifact_path;].\$env:UWP_Project_Directory\AppPackages\StudySmarterFlashcards_${{steps.getVersion.outputs.version}}_Test\StudySmarterFlashcards_${{steps.getVersion.outputs.version}}_x86_x64_arm_bundle.msixbundle"
      shell: pwsh
    
    - name: Upload release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.prepare_artifact_metadata.outputs.artifact_path }}
        asset_name: StorePackage_${{steps.getVersion.outputs.version}}.msixbundle
        asset_content_type: application/msixbundle   
        
        
        
      
